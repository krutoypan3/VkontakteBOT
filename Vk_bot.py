import json
import socket
import threading
import requests
import urllib3
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import random
import time
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id


# –ò–º–ø–æ—Ä—Ç API –∫–ª—é—á–∞(—Ç–æ–∫–µ–Ω–∞) –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
f = open('D://VK_BOT/APIKEY.txt', 'r')
APIKEYSS = f.read()  # —Ç–æ–∫–µ–Ω –Ω—É–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Ñ–∞–π–ª –≤—ã—à–µ(–ø—É—Ç—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)), –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
f.close()
print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...")
group_id = '196288744'  # –£–∫–∞–∑—ã–≤–∞–µ–º id —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
oshibka = 0  # –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
threads = list()
eventhr = []
kolpot = -1
z = open('zapusk_game.txt', 'w')
z.close()


def error(Error):
    global oshibka
    oshibka = oshibka + 1
    print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" + '‚Ññ' + str(oshibka) + Error)
    if Error == " - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∫":
        time.sleep(5.0)
    main()


def main():
    global oshibka, kolpot  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    try:
        vk_session = vk_api.VkApi(token=APIKEYSS)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∏–º–µ–Ω–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        longpoll = VkBotLongPoll(vk_session, group_id)
        vk = vk_session.get_api()
        try:

            # –ó–∞–ø—Ä–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã
            def zapret(chto):
                zap_command = open('zap_command.txt', 'r')
                asq = 0
                for line in zap_command:
                    if str(event.object.peer_id) + ' ' + str(chto) + '\n' == str(line):
                        send_msg("–ö–æ–º–∞–Ω–¥–∞ —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
                        lines = zap_command.readlines()
                        zap_command.close()
                        zap_command = open("zap_command.txt", 'w')
                        for linec in lines:
                            if linec != str(event.object.peer_id) + ' ' + str(chto) + '\n':
                                zap_command.write(linec)
                        asq = 1
                        break
                zap_command.close()
                if asq == 0:
                    zap_command = open('zap_command.txt', 'a')
                    zap_command.write(str(event.object.peer_id) + ' ' + str(chto) + '\n')
                    zap_command.close()
                    send_msg("–¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            def provzapret(chto, a, b):
                zap_command = open('zap_command.txt', 'r')
                asq = 0
                for line in zap_command:
                    if str(event.object.peer_id) + ' ' + str(chto) + '\n' == str(line):
                        send_msg("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã")
                        asq = 1
                        break
                zap_command.close()
                if asq == 0:
                    send_ft(a, b)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            def provbadwordth(slovaf):
                for i in slovaf:
                    zap_wordf = open('zap_word.txt', 'r')
                    asq = False
                    for line in zap_wordf:
                        if (str(i)).lower() + '\n' == line:
                            asq = True
                    zap_wordf.close()
                    if asq:
                        if str(i) != '':
                            send_msg('[' + 'id' + str(event.object.from_id) + '|' + '–û—Å—É–∂–¥–∞—é' + ']')
                            break

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            def send_msg(ms_g):
                vk.messages.send(peer_id=event.object.peer_id, random_id=0, message=ms_g)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            def send_msg_new(peerid, ms_g):
                vk.messages.send(peer_id=peerid, random_id=0, message=ms_g)

            # –ü–æ–∫–∞–∑ –æ–Ω–ª–∞–π–Ω–∞ –±–µ—Å–µ–¥—ã
            def who_online():
                try:
                    responseonl = vk.messages.getConversationMembers(peer_id=event.object.peer_id)
                    liss = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω: \n\n'
                    for n in responseonl["profiles"]:
                        if n.get('online'):  # ['vk.com/id'+id|first_name last name]
                            liss += ('üíö' + str(n.get('first_name')) + ' ' + str(n.get('last_name')) + '\n')
                    return liss
                except vk_api.exceptions.ApiError:
                    send_msg('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É –Ω–µ–æ—é—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
                    main()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞ –í–ö
            def send_ft(first_el, end_el):
                vivord = str(random.randint(first_el, end_el))
                vk.messages.send(peer_id=event.object.peer_id, random_id=0,
                                 attachment='photo-' + group_id + '_' + vivord)
                time.sleep(1)
                main_keyboard()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å —Å–µ—Ä–≤–µ—Ä–∞ –í–ö
            def send_vd(first_el, end_el):
                vivord = str(random.randint(first_el, end_el))
                vk.messages.send(peer_id=event.object.peer_id, random_id=0,
                                 attachment='video-' + group_id + '_' + vivord)
                time.sleep(1)
                main_keyboard()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–µ—Ç –ø—Ä–∏ –µ–µ –Ω–∞–ª–∏—á–∏–∏
            def adm_prov_and_zapret(chto):
                if adm_prov():
                    zapret(chto)
                else:
                    send_msg('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ—Å–µ–¥—ã
            def adm_prov():
                try:
                    he_admin = False
                    responseapr = vk.messages.getConversationMembers(peer_id=event.object.peer_id)
                    for m in responseapr["items"]:
                        if m["member_id"] == event.object.from_id:
                            he_admin = m.get('is_admin')
                    if not he_admin:
                        he_admin = False
                    return he_admin
                except vk_api.exceptions.ApiError:
                    send_msg('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ—Å–µ–¥—ã')
                    main()

            # –õ–∏—á–Ω–∞—è –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –±–µ—Å–µ–¥–∞
            def lich_or_beseda():
                try:
                    responselic = vk.messages.getConversationMembers(peer_id=event.object.peer_id)
                    if responselic['count'] <= 2:
                        return 1
                    else:
                        return 0
                except vk_api.exceptions.ApiError:
                    return 0

            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            def main_keyboard():
                if lich_or_beseda():
                    keyboard = VkKeyboard(one_time=True)
                    keyboard.add_button('–∞—Ä—Ç', color=VkKeyboardColor.PRIMARY)
                    keyboard.add_button('–ª–æ–ª–∏', color=VkKeyboardColor.PRIMARY)
                    keyboard.add_button('–Ω–µ–∫–æ', color=VkKeyboardColor.PRIMARY)
                    keyboard.add_button('–∞—Ö–µ–≥–∞–æ', color=VkKeyboardColor.PRIMARY)
                    keyboard.add_line()  # –û—Ç—Å—Ç—É–ø —Å—Ç—Ä–æ–∫–∏
                    keyboard.add_button('—Ö–µ–Ω—Ç–∞–π', color=VkKeyboardColor.NEGATIVE)
                    keyboard.add_line()
                    keyboard.add_button('–≤–∏–¥–µ–æ', color=VkKeyboardColor.POSITIVE)

                    vk.messages.send(peer_id=event.object.peer_id, random_id=get_random_id(),
                                     keyboard=keyboard.get_keyboard(), message='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:')

            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å –æ–¥–Ω–∏–º –∞—Ä–≥—Ä—É–º–µ–Ω—Ç–æ–º
            def thread_start(Func, Arg):
                global kolpot
                x = threading.Thread(target=Func, args=(Arg,))
                threads.append(x)
                kolpot += 1
                eventhr.append(kolpot)
                x.start()

            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å –¥–≤—É–º—è –∞—Ä–≥—Ä—É–º–µ–Ω—Ç–∞–º–∏
            def thread_start2(Func, Arg, Arg2):
                x = threading.Thread(target=Func, args=(Arg, Arg2))
                threads.append(x)
                x.start()

            # –ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ
            def game_ugadai_chislo(my_peer, my_from):
                zapret_zap_game(my_peer)
                responseg1 = vk.users.get(user_ids=my_from)
                he_name = responseg1[0]['first_name']
                he_family = responseg1[0]['last_name']
                chel = '[' + 'id' + str(event.object.from_id) + '|' + str(he_name) + ' ' + str(he_family) + ']' + ', '
                send_msg(chel + '–∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –¥–ª—è —Ç–µ–±—è:\n' + ' —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3')
                timing = time.time()
                game_chislo = random.randint(1, 3)
                time.sleep(0.1)
                for eventhr[kolpot] in longpoll.listen():
                    if time.time() - timing > 10.0:
                        send_msg_new(my_peer, chel + '–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ...')
                        zapret_zap_game(my_peer)
                        break
                    if eventhr[kolpot].type == VkBotEventType.MESSAGE_NEW:
                        if eventhr[kolpot].object.peer_id == my_peer and eventhr[kolpot].object.from_id == my_from:
                            if str(eventhr[kolpot].obj.text) == "1" or str(eventhr[kolpot].obj.text) == "2"\
                                    or str(eventhr[kolpot].obj.text) == "3":
                                if str(game_chislo) == str(eventhr[kolpot].obj.text):
                                    send_msg_new(my_peer, chel + '–ø—Ä–∞–≤–∏–ª—å–Ω–æ!' + ' - –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ' +
                                                 str(game_chislo))
                                    zapret_zap_game(my_peer)
                                    break
                                else:
                                    send_msg_new(my_peer, chel + '–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!' +
                                                 ' - –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ' + str(game_chislo))
                                    zapret_zap_game(my_peer)
                                    break
                            else:
                                send_msg_new(my_peer, chel + '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ')

            # –ò–≥—Ä–∞ –∫—Ç–æ –∫—Ä—É—á–µ
            def game_kto_kruche(my_peer):
                zapret_zap_game(my_peer)
                send_msg_new(my_peer, '–ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ "–ö—Ç–æ –∫—Ä—É—á–µ?". –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "—É—á–∞—Å—Ç–≤—É—é –∫–∫". '
                                      '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: 2')
                uchastniki = []
                timing = time.time()
                for eventhr[kolpot] in longpoll.listen():
                    if time.time() - timing < 15.0:
                        if eventhr[kolpot].type == VkBotEventType.MESSAGE_NEW:
                            if (eventhr[kolpot].obj.text == "—É—á–∞—Å—Ç–≤—É—é –∫–∫"
                                or eventhr[kolpot].obj.text == "–£—á–∞—Å—Ç–≤—É—é –∫–∫"
                                or eventhr[kolpot].obj.text == "—É—á–∞–≤—Å—Ç–≤—É—é –∫–∫"
                                or eventhr[kolpot].obj.text == "–£—á–∞–≤—Å—Ç–≤—É—é –∫–∫") \
                                    and eventhr[kolpot].object.peer_id == my_peer:
                                if eventhr[kolpot].object.from_id in uchastniki:
                                    send_msg_new(my_peer, '–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
                                else:
                                    uchastniki.append(eventhr[kolpot].object.from_id)
                                    send_msg_new(my_peer, '–ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –ø—Ä–∏–Ω—è—Ç–∞')
                    if time.time() - timing > 15.0:
                        if len(uchastniki) < 2:
                            send_msg_new(my_peer, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
                            zapret_zap_game(my_peer)
                            break
                        else:
                            send_msg('–£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω—ã, –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è')
                            priz = random.randint(0, len(uchastniki)-1)
                            responseg2 = vk.users.get(user_ids=uchastniki[priz])
                            he_name = responseg2[0]['first_name']
                            he_family = responseg2[0]['last_name']
                            chel = '[' + 'id' + str(uchastniki[priz]) + '|' + str(he_name) + ' ' + str(
                                he_family) + ']' + ', '
                            send_msg_new(my_peer, chel + '—Ç—ã –∫—Ä—É—á–µ')
                            zapret_zap_game(my_peer)
                            break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—Ç –∑–∞–ø—É—Å–∫–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ
            def prov_zap_game(my_peer):
                zapusk_gamef = open('zapusk_game.txt', 'r')
                for line in zapusk_gamef:
                    if (str(my_peer)) + '\n' == line:
                        zapusk_gamef.close()
                        send_msg_new(my_peer, '–î—Ä—É–≥–∞—è –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!')
                        return True
                zapusk_gamef.close()
                return False

            # –ó–∞–ø—Ä–µ—Ç –∑–∞–ø—É—Å–∫–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥–µ
            def zapret_zap_game(my_peer):
                zapusk_gamef = open('zapusk_game.txt', 'r')
                lines = zapusk_gamef.readlines()
                zapusk_gamef.close()
                for line in lines:
                    if line == str(my_peer) + '\n':
                        zapusk_gamef = open("zapusk_game.txt", 'w')
                        for linec in lines:
                            if linec != str(my_peer) + '\n':
                                zapusk_gamef.write(linec)
                        zapusk_gamef.close()
                        return True
                zapusk_gamef = open('zapusk_game.txt', 'a')
                zapusk_gamef.write(str(my_peer) + '\n')
                zapusk_gamef.close()
                return False

            # –ò–≥—Ä–∞ –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
            def game_brosok_kubika(my_peer):
                zapret_zap_game(my_peer)
                send_msg_new(my_peer, '–ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ "–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞". –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "—É—á–∞—Å—Ç–≤—É—é –±–∫". '
                                      '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: 2')
                uchastniki = []
                timing = time.time()
                for eventhr[kolpot] in longpoll.listen():
                    if time.time() - timing < 15.0:
                        if eventhr[kolpot].type == VkBotEventType.MESSAGE_NEW:
                            if (eventhr[kolpot].obj.text == "—É—á–∞—Å—Ç–≤—É—é –±–∫"
                                or eventhr[kolpot].obj.text == "–£—á–∞—Å—Ç–≤—É—é –±–∫"
                                or eventhr[kolpot].obj.text == "—É—á–∞–≤—Å—Ç–≤—É—é –±–∫"
                                or eventhr[kolpot].obj.text == "–£—á–∞–≤—Å—Ç–≤—É—é –±–∫") \
                                    and eventhr[kolpot].object.peer_id == my_peer:
                                if eventhr[kolpot].object.from_id in uchastniki:
                                    send_msg_new(my_peer, '–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
                                else:
                                    uchastniki.append(eventhr[kolpot].object.from_id)
                                    send_msg_new(my_peer, '–ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –ø—Ä–∏–Ω—è—Ç–∞')
                    if time.time() - timing > 15.0:
                        if len(uchastniki) < 2:
                            send_msg_new(my_peer, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
                            zapret_zap_game(my_peer)
                            break
                        else:
                            send_msg_new(my_peer, '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω—ã, –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è')
                            chet = []
                            for i in uchastniki:
                                responseg3 = vk.users.get(user_ids=i)
                                he_name = responseg3[0]['first_name']
                                he_family = responseg3[0]['last_name']
                                chel = '[' + 'id' + str(i) + '|' + str(he_name) + ' ' + str(
                                    he_family) + ']' + '...'
                                send_msg_new(my_peer, '&#9745;–ö—É–±–∏–∫–∏ –±—Ä–æ—Å–∞–µ—Ç ' + chel)
                                time.sleep(3)
                                kubiki = random.randint(2, 12)
                                chet.append(kubiki)
                                send_msg_new(my_peer, '&#9989;–Ω–∞ –∫—É–±–∏–∫–∞—Ö ' + str(kubiki))
                                time.sleep(1)
                            minchet = 1
                            pobeditel = 0
                            nich = 0
                            for i in range(len(uchastniki)):
                                if chet[i] >= minchet:
                                    if chet[i] == minchet:
                                        nich = 1
                                    else:
                                        nich = 0
                                    minchet = chet[i]
                                    pobeditel = uchastniki[i]
                            if nich == 1:
                                send_msg_new(my_peer, '–ù–∏—á—å—è!')
                                zapret_zap_game(my_peer)
                            else:
                                responseg3 = vk.users.get(user_ids=pobeditel)
                                he_name = responseg3[0]['first_name']
                                he_family = responseg3[0]['last_name']
                                chel = '&#127881;[' + 'id' + str(pobeditel) + '|' + str(he_name) + ' ' + str(
                                    he_family) + ']' + '&#127881; '
                                send_msg_new(my_peer, chel + '–ø–æ–±–µ–¥–∏–ª!&#127882;')
                                zapret_zap_game(my_peer)
                                break

            for event in longpoll.listen():  # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ª–∏—Å—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
                if event.type == VkBotEventType.MESSAGE_NEW:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Ö–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
                    slova = event.obj.text.split()  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ª–æ–≤–∞
                    thread_start(provbadwordth, slova)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ –Ω–∞ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
                    # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
                    # –ò–≥—Ä—ã -----------------------------------------------------------------------------------------
                    if event.obj.text == '—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ' or event.obj.text == '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ':
                        if not prov_zap_game(event.object.peer_id):
                            thread_start2(game_ugadai_chislo, event.object.peer_id, event.object.from_id)
                    elif event.obj.text == '–∫—Ç–æ –∫—Ä—É—á–µ' or event.obj.text == '–ö—Ç–æ –∫—Ä—É—á–µ':
                        if not prov_zap_game(event.object.peer_id):
                            thread_start(game_kto_kruche, event.object.peer_id)
                    elif event.obj.text == '–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞' or event.obj.text == '–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞':
                        if not prov_zap_game(event.object.peer_id):
                            thread_start(game_brosok_kubika, event.object.peer_id)
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã -----------------------------------------------------------------------------
                    elif event.obj.text == "–±—Ä–∞—Ç–∏–∫ –ø—Ä–∏–≤–µ—Ç":
                        send_msg("&#128075; –ü—Ä–∏–≤–µ—Ç–∏–∫")
                        main_keyboard()
                    elif event.obj.text == "–ø–æ–∫–∞" or event.obj.text == "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏" or event.obj.text == "—Å–ø–æ–∫–∏" \
                            or event.obj.text == "bb":
                        send_msg("&#128546; –ü—Ä–æ—â–∞–π")
                    elif event.obj.text == "–≤—Ä–µ–º—è":
                        send_msg(str(time.ctime()))
                    elif event.obj.text == "–∫–æ–º–∞–Ω–¥—ã" or event.obj.text == "–±—Ä–∞—Ç–∏–∫" or event.obj.text == "–ë—Ä–∞—Ç–∏–∫" or\
                            event.obj.text == "–ö–æ–º–∞–Ω–¥—ã":
                        thread_start2(send_msg_new, event.object.peer_id,
                                      ' ‚öôÔ∏è –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ vk.com/@bratikbot-commands')
                        main_keyboard()
                    elif event.obj.text == "–Ω–∞—á–∞—Ç—å" or event.obj.text == "–ù–∞—á–∞—Ç—å":
                        main_keyboard()
                    elif event.obj.text == "–æ–Ω–ª–∞–π–Ω" or event.obj.text == "–∫—Ç–æ —Ç—É—Ç":
                        send_msg(who_online())
                    elif event.obj.text == "–∏–Ω—Ñ–æ":
                        send_msg("–ú–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –û–≥–∞–Ω–µ—Å—è–Ω –ê—Ä—Ç–µ–º.\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫ –Ω–µ–º—É: vk.com/aom13")
                    elif event.obj.text == "-—è –∞–¥–º–∏–Ω":
                        if adm_prov():
                            send_msg('–î–∞, —Ç—ã –∞–¥–º–∏–Ω')
                        else:
                            send_msg('–£–≤—ã –Ω–æ –Ω–µ—Ç')
                    # –û—Ç–≤–µ—Ç—ã —Å–æ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ --------------------------------------------------------------------------
                    elif event.obj.text == "–ê—Ä—Ç" or event.obj.text == "–∞—Ä—Ç":
                        provzapret('–∞—Ä—Ç', 457241615, 457241726)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    elif event.obj.text == "–°—Ç–∏–∫–µ—Ä" or event.obj.text == "—Å—Ç–∏–∫–µ—Ä":
                        provzapret('—Å—Ç–∏–∫–µ—Ä', 457241746, 457241786)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    elif event.obj.text == "–≤–∏–¥–µ–æ" or event.obj.text == "–í–∏–¥–µ–æ":
                        send_vd(456239025, 456239134)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    elif event.obj.text == "—Ö–µ–Ω—Ç–∞–π" or event.obj.text == "–•–µ–Ω—Ç–∞–π":
                        provzapret('—Ö–µ–Ω—Ç', 457239410, 457239961)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    elif event.obj.text == "–∞—Ö–µ–≥–∞–æ" or event.obj.text == "–ê—Ö–µ–≥–∞–æ":
                        provzapret('–∞—Ö–µ–≥–∞–æ', 457241147, 457241266)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    elif event.obj.text == "–ª–æ–ª–∏" or event.obj.text == "–õ–æ–ª–∏":
                        provzapret('–ª–æ–ª–∏', 457239962, 457241144)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    elif event.obj.text == "–Ω–µ–∫–æ" or event.obj.text == "–ù–µ–∫–æ":
                        if random.randint(0, 1) == 1:
                            provzapret('–Ω–µ–∫–æ', 457241325, 457241424)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                        else:
                            provzapret('–Ω–µ–∫–æ', 457241502, 457241601)  # –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
                    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—Ä–µ—Ç–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ (–Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π) ---------------------------
                    elif event.obj.text == "–∑–∞–ø—Ä–µ—Ç –ª–æ–ª–∏":
                        adm_prov_and_zapret('–ª–æ–ª–∏')
                    elif event.obj.text == "–∑–∞–ø—Ä–µ—Ç –∞—Ö–µ–≥–∞–æ":
                        adm_prov_and_zapret('–∞—Ö–µ–≥–∞–æ')
                    elif event.obj.text == "–∑–∞–ø—Ä–µ—Ç —Ö–µ–Ω—Ç–∞–π":
                        adm_prov_and_zapret('—Ö–µ–Ω—Ç')
                    elif event.obj.text == "–∑–∞–ø—Ä–µ—Ç –∞—Ä—Ç":
                        adm_prov_and_zapret('–∞—Ä—Ç')
                    elif event.obj.text == "–∑–∞–ø—Ä–µ—Ç –Ω–µ–∫–æ":
                        adm_prov_and_zapret('–Ω–µ–∫–æ')
                    # –û—Ç–ª–∞–¥–∫–∞ ---------------------------------------------------------------------------------------
                    if event.obj.text == 'dump':
                        with open('dump.json', 'w') as dump:
                            response = vk.messages.search(date='26062020', peer_id=event.object.peer_id, count=5,
                                                          extended=1)
                            json.dump(response, dump)
                            send_msg('dumped')
        except (requests.exceptions.ConnectionError, urllib3.exceptions.MaxRetryError,
                urllib3.exceptions.NewConnectionError, socket.gaierror):
            error(" - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∫")

        finally:
            error(' - –∞ —Ö—Ä–µ–Ω –µ–≥–æ –∑–Ω–∞–µ—Ç')
    except (requests.exceptions.ConnectionError, urllib3.exceptions.MaxRetryError,
            urllib3.exceptions.NewConnectionError, socket.gaierror):
        error(" - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∫")


#     elif event.obj.text == "-dump":
#         with open('dump.json', 'w') as dump:
#             response = vk.messages.getConversationMembers(peer_id=event.object.peer_id)
#             json.dump(response, dump)
#             send_msg('dumped')
#             print(response['profiles'][0]['first_name'])

if __name__ == '__main__':
    main()
